# -*- coding: utf-8 -*-
"""Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lxjlsVqFaZTefmGUsOek6CB-JguyyNNq

Problem Statement:

**To detect whether the person has malignant cancer (cancer cells that grow rapidly) or the benign type (where the cancer cells growth is slow), by analysing the previously collected data.**

*import the dependencies*
"""

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# loading the dataset into pandas Dataframe

breast_cancer_data = datasets.load_breast_cancer()

print(breast_cancer_data)

data_frame = pd.DataFrame(data = breast_cancer_data.data, columns = breast_cancer_data.feature_names)
data_frame.head()

# Adding the labels/targets to the Data Frame

data_frame['labels'] = breast_cancer_data.target

data_frame.head()

# Statistical Analysis of the Dataset

data_frame.describe()

# counting the values of malignant and benign 

data_frame['labels'].value_counts()

"""0 --> Malignant

1--> Benign
"""

data_frame.groupby('labels').mean()

"""Data Normalization"""

print(breast_cancer_data.data.mean())
print(breast_cancer_data.data.std())

scaler = StandardScaler()

scaler.fit(breast_cancer_data.data)

standardized_data = scaler.transform(breast_cancer_data.data)

print(standardized_data)

print(standardized_data.mean())
print(standardized_data.std())

std_df = pd.DataFrame(standardized_data)

std_df.head()

x = standardized_data
y = breast_cancer_data.target

# Splitting the Dataset into train and test data

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y, random_state = 3)

print(x.shape)
print(x_train.shape)
print(x_test.shape)

"""Model Training"""

model = LogisticRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_train)
model_accuracy = accuracy_score(y_pred, y_train)

"""Model Evaluation"""

print('Accuracy of the training model is ', model_accuracy)

y_pred_test = model.predict(x_test)
model_test_data_accuaracy = accuracy_score(y_pred_test, y_test)

print('Accuracy of the test data is ', model_test_data_accuaracy)

"""**The model will predict the condition of breast cancer is malignant or benign with 97% accuarcy**

Making a predictive system
"""

input = (17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
input_array = np.asarray(input)
print(input_array.shape)

# Reshaping the array

reshaped_input = input_array.reshape(1, -1)
print(reshaped_input.shape)

# Normalizing the data

std_input = scaler.transform(reshaped_input)
print(std_input)

# Predicting the output

output = model.predict(std_input)
print(output)

if output[0] == 0:
  print('The person has a malignant breast cancer')
else:
  print('The person has benign breast cancer')